# Task 4: "Naive" RSA encryption system implementation.
import random # Import the random module for generating random numbers
from utils import input_int, print_hr # Import helper functions from utils
from nt375_task1 import expo # Import the expo module from task1
from nt375_task2 import EEA # Import EEA function from task2
from nt375_task3 import is_prime_2_step # Import is_prime_2_step for checking prime function from task3

# Function to find the Greatest Common Divisor between a and b following Euclidean Algorithm
def gcd (a, b):
  if b > a:
    a, b = b, a

  while b != 0:
    a, b = b, a % b
  return a

# Function to generate a random prime number
def generate_prime(n: int) -> int:
    while True:
        p = random.randint(2**(n-1), 2**n - 1) # random number between 2^(n-1) and 2^n - 1
        if is_prime_2_step(p): # the random number, if it is prime, send it out
            return p

# Function to find d; d is the multiplication inverse of e by using EEA and mod M
def modular_inverse(e: int, M: int) -> int:
    g, x, _ = EEA(e, M, False)
    if g != 1:
        raise Exception('Modular inverse does not exist')
    return x % M

# Function to set the values for use in encryption and decryption
def setup(v: int = 20) -> tuple[int, int]:
  # p is the first prime generated (random prime number) (ν/2-bit prime)
  p = generate_prime(v//2)
  # q is the second prime generated (random prime number) (ν/2-bit prime)
  q = generate_prime(v//2)
  # N is the product of p and q
  N = p * q
  # M is phi of N
  M = (p - 1) * (q - 1)

  # e has to be mutually prime with M, using an encryption key
  e = random.randint(2, M - 1)
  while gcd(e, M) != 1:
    e = random.randint(2, M - 1)

  # d is the multiplication inverse of e by using EEA and mod M
  d = modular_inverse(e, M)

  return p, q, N, e, d

# Function to show the values from the setup function
def print_setup (p: int, q: int, N: int, e: int, d: int):
  print_hr() # print break line
  print("Setup: ")
  print(f"The first prime generated by the Setup algorithm is p = {p}")
  print(f"The second prime generated by the Setup algorithm is q = {q}")
  print(f"The integer N = pq = {N}")
  print(f"The encryption exponent is e = {e}")
  print(f"The decryption exponent is d = {d}")


# Function to choose the encryption or decryption option
def input_option () -> int:
  print_hr() # print break line
  print("Options: ")
  print("1. Encryption")
  print("2. Decryption")
  print("Any other number to quit")
  option = input_int("Your options: ")
  return option

# Function to encrypt and decrypt a message
def encrypt_decrypt(N: int, e: int, msg: int = None, encrypt: bool = True) -> int:
  print("Encryption:" if encrypt else "Decryption")
  source = "message" if encrypt else "ciphertext"
  print(f"Your {source} space is the set {{Z/NZ}} = {{0, 1, ..., {N-1}}}")
  cipher = None
  while True:
    if msg is None:
      msg = input_int("Please enter a number from this set: ")
    if 0 <= msg < N: # check msg; only number between 0 and N is allowed to encrypt
      cipher = expo(msg, e, N) # this is the main of this function
      print(f"The {"ciphertext" if encrypt else "plaintext"} for your {source} {msg} is {cipher}")
      return cipher
    else:
      print(f"Invalid {source}! Please enter a number between 0 and {N-1}.")

# to run the program and perform encryption and decryption operations
if __name__ == "__main__":
  try:
    # ν is called "nu," input value has to be equal to or greater than 6
    nu = input_int("Please enter the security parameter 'nu': ", 6)

    # Setup the values for use in encryption and decryption
    p, q, N, e, d = setup(nu)
    # Print the values from the setup
    print_setup(p, q, N, e, d)

    # Perform encryption and decryption operations in a loop until the user chooses to quit
    while True:
      option = input_option()
      print_hr() # print break line
      match option:
        case 1:
          encrypt_decrypt(N,e)
        case 2:
          encrypt_decrypt(N,d, encrypt=False)
        case _:
          exit(0)
  except Exception as e:
    print_hr() # print break line
    print(f"An error occurred: {e}")
