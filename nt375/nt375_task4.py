import random
from nt375_task3 import is_prime

def gcd (a, b):
  if b > a:
    a, b = b, a

  while b != 0:
    a, b = b, a % b
  return a

def EEA(a: int, b: int) -> tuple[int, int, int]:
  r1 = a
  s1 = 1
  t1 = 0
  r = b
  s = 0
  t = 1

  while r != 0:
    q = r1 // r
    r1, r = r, r1 - q * r
    s1, s = s, s1 - q * s
    t1, t = t, t1 - q * t

  return r1, s1, t1

def generate_prime(n: int) -> int:
    while True:
      p = random.randint(2**(n-1), 2**(n - 1))
      if is_prime(p):
        return p

def mod_inverse(e: int, phi: int) -> int:
    _, x, _ = EEA(e, phi)
    return x % phi

def setup(v: int) -> tuple[int, int]:
  p = generate_prime(v//2)
  q = generate_prime(v//2)
  N = p * q

  phi = (p - 1) * (q - 1)
  e = random.randint(2, phi - 1)
  while gcd(e, phi) != 1:
    e = random.randint(2, phi - 1)

  d = mod_inverse(e, phi)

  return p, q, N, e, d

def print_setup (p: int, q: int, N: int, e: int, d: int):
  print("--------------------------------")
  print("Setup: ")
  print(f"The first prime generated by the Setup algorithm is p = {p}")
  print(f"The second prime generated by the Setup algorithm is q = {q}")
  print(f"The integer N = pq = {N}")
  print(f"The encryption exponent is e = {e}")
  print(f"The decryption exponent is e = {d}")
  print("--------------------------------")

def input_option () -> int:
  print("--------------------------------")
  print("Options: ")
  print("1. Encryption")
  print("2. Decryption")
  print("Any other number to quit")
  option = input("Your options: ")
  print("--------------------------------")
  return int(option)

def main():
  nu = int(input("Please enter the security parameter 'nu': "))
  option = input_option()

  p, q, N, e, d = setup(nu)
  print_setup(p, q, N, e, d)

  match option:
    case 1:
      1
    case 2:
      2
    case _:
      exit(1)

if __name__ == "__main__":
  main()
